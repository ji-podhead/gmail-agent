import asyncio
import os
import json
import base64
from dotenv import load_dotenv
from google import genai
from google.generativeai import types
from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client
from mcp.client.http import HttpServerParameters, http_client # Import für HTTP
# Load environment variables
load_dotenv()

# Gemini API key
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
MCP_SERVER_BASE_URL = os.getenv("MCP_SERVER_URL", "http://localhost:8000/mcp") # Beispiel
async def categorize_email(email_body):
    """Categorizes email content using Gemini API."""
    client = genai.Client(api_key=GEMINI_API_KEY)

    # Re-add StdioServerParameters, setting args for stdio
    server_params = StdioServerParameters(
        command="mcp-flight-search",
        args=["--connection_type", "stdio"],
        env={"SERP_API_KEY": os.getenv("SERP_API_KEY")},
    )
    server_params_transport = HttpServerParameters(
        base_url=MCP_SERVER_BASE_URL,
        # headers=custom_headers, # Fügen Sie dies hinzu, wenn Ihr MCP-Server benutzerdefinierte Header erwartet
        # timeout_seconds=30, # Optional: Timeout für HTTP-Anfragen
    )

    async with stdio_client(server_params) as (read, write):
        async with ClientSession(read, write) as session:
            prompt = f"Categorize the following email: {email_body}"
            await session.initialize()

            mcp_tools = await session.list_tools()
            tools = [
                types.Tool(
                    function_declarations=[
                        {
                            "name": tool.name,
                            "description": tool.description,
                            "parameters": {
                                k: v
                                for k, v in tool.inputSchema.items()
                                if k not in ["additionalProperties", "$schema"]
                            },
                        }
                    ]
                )
                for tool in mcp_tools.tools
            ]

            response = client.models.generate_content(
                model="gemini-2.5-pro-exp-03-25",
                contents=prompt,
                config=types.GenerateContentConfig(
                    temperature=0,
                    tools=tools,
                ),
            )

            if response.candidates[0].content.parts[0].function_call:
                function_call = response.candidates[0].content.parts[0].function_call

                result = await session.call_tool(
                    function_call.name, arguments=dict(function_call.args)
                )

                try:
                    category_data = json.loads(result.content[0].text)
                    return category_data
                except json.JSONDecodeError:
                    print("MCP server returned non-JSON response:")
                    print(result.content[0].text)
                except (IndexError, AttributeError):
                     print("Unexpected result structure from MCP server:")
                     print(result)
            else:
                print("No function call was generated by the model.")
                if response.text:
                     print("Model response:")
                     print(response.text)
            return "unknown"

async def filter_emails():
    """Fetches and filters emails from Gmail."""
    # TODO: Implement Gmail API call using mcp_tool
    print("Fetching emails from Gmail...")
    # Placeholder for email filtering logic
    print("Email filtering completed.")

async def main():
    """Main function to execute email filtering."""
    await filter_emails()

if __name__ == '__main__':
    asyncio.run(main())
